{"ast":null,"code":"var _jsxFileName = \"E:\\\\PROJECT AREA\\\\updated project\\\\college-main\\\\college-main\\\\front\\\\src\\\\components\\\\layout\\\\BrandDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getData } from '../../Api';\nimport '../styles/BrandDetails.css';\nimport MotorcycleCard from './MotorcycleCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BrandDetails = () => {\n  _s();\n  const {\n    brandId\n  } = useParams();\n  const [bikes, setBikes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Brand name mapping for API query\n  // Ensure these names exactly match the 'brand' field in your backend data\n  const brandMapping = {\n    'hero': 'Hero MotoCorp',\n    'royal-enfield': 'Royal Enfield',\n    'yamaha': 'Yamaha',\n    'ktm': 'KTM',\n    'bajaj': 'Bajaj',\n    'ducati': 'Ducati',\n    'bmw': 'BMW',\n    'kawasaki': 'Kawasaki'\n  };\n\n  // Hardcoded brand information (ideally this would come from the backend)\n  const brandInfo = {\n    yamaha: {\n      name: \"Yamaha\",\n      description: \"Yamaha Motor Company is a Japanese manufacturer known for producing motorcycles, marine products, and other motorized vehicles.\"\n    },\n    hero: {\n      name: \"Hero\",\n      description: \"Hero MotoCorp is an Indian multinational motorcycle and scooter manufacturer headquartered in New Delhi, India.\"\n    },\n    ktm: {\n      name: \"KTM\",\n      description: \"KTM AG is an Austrian motorcycle and sports car manufacturer known for their off-road motorcycles and high-performance street bikes.\"\n    },\n    'royal-enfield': {\n      name: \"Royal Enfield\",\n      description: \"Royal Enfield is an Indian multinational motorcycle manufacturing company, known for its classic-styled motorcycles.\"\n    },\n    bajaj: {\n      name: \"Bajaj\",\n      description: \"Bajaj Auto is an Indian multinational manufacturer of motorcycles, three-wheelers and quadricycles.\"\n    },\n    ducati: {\n      name: \"Ducati\",\n      description: \"Ducati Motor Holding S.p.A. is an Italian motorcycle manufacturing company known for high-performance motorcycles.\"\n    },\n    bmw: {\n      name: \"BMW\",\n      description: \"BMW Motorrad is the motorcycle division of BMW, known for producing premium motorcycles with advanced technology.\"\n    },\n    kawasaki: {\n      name: \"Kawasaki\",\n      description: \"Kawasaki Heavy Industries Motorcycle & Engine is a Japanese manufacturer of motorcycles, known for their powerful sports bikes.\"\n    }\n  };\n  useEffect(() => {\n    const fetchBrandBikes = async () => {\n      setLoading(true);\n      setError(null); // Reset error state\n\n      const brandName = brandMapping[brandId];\n      if (!brandName) {\n        setError(\"Invalid brand ID.\"); // Handle case where brandId is not in mapping\n        setLoading(false);\n        return;\n      }\n      try {\n        // Fetch bikes for the specific brand\n        // ASSUMPTION: The backend endpoint 'api/get-bike/' can accept a query parameter like '?brand=BrandName'\n        // If your backend cannot do this, you will need to modify the backend API.\n        const data = await getData(`api/get-bike/?brand=${encodeURIComponent(brandName)}`);\n\n        // No need to filter on the frontend anymore if backend filters\n        setBikes(data);\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching brand bikes:\", err);\n        setError(err.message || \"Failed to fetch bikes.\");\n        setLoading(false);\n      }\n    };\n    fetchBrandBikes();\n  }, [brandId, brandMapping]); // Add brandMapping to dependency array if it could change (unlikely here)\n\n  // Check if brandId is valid before trying to access brandInfo\n  if (!brandMapping[brandId]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"brand-not-found\",\n      children: \"Brand not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 14\n    }, this);\n  }\n\n  // Use brandInfo after confirming brandId is valid\n  const currentBrandInfo = brandInfo[brandId];\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading bikes...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"brand-details-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"brand-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: currentBrandInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"brand-description\",\n        children: currentBrandInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bikes-grid\",\n      children: bikes.map(bike => /*#__PURE__*/_jsxDEV(MotorcycleCard, {\n        // Assuming bike.id is unique and exists\n        id: bike.id,\n        image: bike.image1 // Assuming image1 field exists\n        ,\n        name: bike.name,\n        year: bike.year,\n        category: bike.category,\n        displacement: bike.displacement,\n        description: bike.about || 'No description.' // Removed the comment within JSX attributes\n        ,\n        price: bike.price\n      }, bike.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), bikes.length === 0 && !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-bikes\",\n      children: [\"No bikes found for \", currentBrandInfo.name, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(BrandDetails, \"+nk1UwiyY2EcuJGEOfWB/sCOPqc=\", false, function () {\n  return [useParams];\n});\n_c = BrandDetails;\nexport default BrandDetails;\nvar _c;\n$RefreshReg$(_c, \"BrandDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getData","MotorcycleCard","jsxDEV","_jsxDEV","BrandDetails","_s","brandId","bikes","setBikes","loading","setLoading","error","setError","brandMapping","brandInfo","yamaha","name","description","hero","ktm","bajaj","ducati","bmw","kawasaki","fetchBrandBikes","brandName","data","encodeURIComponent","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentBrandInfo","map","bike","id","image","image1","year","category","displacement","about","price","length","_c","$RefreshReg$"],"sources":["E:/PROJECT AREA/updated project/college-main/college-main/front/src/components/layout/BrandDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getData } from '../../Api';\r\nimport '../styles/BrandDetails.css';\r\nimport MotorcycleCard from './MotorcycleCard';\r\n\r\nconst BrandDetails = () => {\r\n  const { brandId } = useParams();\r\n  const [bikes, setBikes] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Brand name mapping for API query\r\n  // Ensure these names exactly match the 'brand' field in your backend data\r\n  const brandMapping = {\r\n    'hero': 'Hero MotoCorp',\r\n    'royal-enfield': 'Royal Enfield',\r\n    'yamaha': 'Yamaha',\r\n    'ktm': 'KTM',\r\n    'bajaj': 'Bajaj',\r\n    'ducati': 'Ducati',\r\n    'bmw': 'BMW',\r\n    'kawasaki': 'Kawasaki'\r\n  };\r\n\r\n  // Hardcoded brand information (ideally this would come from the backend)\r\n  const brandInfo = {\r\n    yamaha: {\r\n      name: \"Yamaha\",\r\n      description: \"Yamaha Motor Company is a Japanese manufacturer known for producing motorcycles, marine products, and other motorized vehicles.\"\r\n    },\r\n    hero: {\r\n      name: \"Hero\",\r\n      description: \"Hero MotoCorp is an Indian multinational motorcycle and scooter manufacturer headquartered in New Delhi, India.\"\r\n    },\r\n    ktm: {\r\n      name: \"KTM\",\r\n      description: \"KTM AG is an Austrian motorcycle and sports car manufacturer known for their off-road motorcycles and high-performance street bikes.\"\r\n    },\r\n    'royal-enfield': {\r\n      name: \"Royal Enfield\",\r\n      description: \"Royal Enfield is an Indian multinational motorcycle manufacturing company, known for its classic-styled motorcycles.\"\r\n    },\r\n    bajaj: {\r\n      name: \"Bajaj\",\r\n      description: \"Bajaj Auto is an Indian multinational manufacturer of motorcycles, three-wheelers and quadricycles.\"\r\n    },\r\n    ducati: {\r\n      name: \"Ducati\",\r\n      description: \"Ducati Motor Holding S.p.A. is an Italian motorcycle manufacturing company known for high-performance motorcycles.\"\r\n    },\r\n    bmw: {\r\n      name: \"BMW\",\r\n      description: \"BMW Motorrad is the motorcycle division of BMW, known for producing premium motorcycles with advanced technology.\"\r\n    },\r\n    kawasaki: {\r\n      name: \"Kawasaki\",\r\n      description: \"Kawasaki Heavy Industries Motorcycle & Engine is a Japanese manufacturer of motorcycles, known for their powerful sports bikes.\"\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchBrandBikes = async () => {\r\n      setLoading(true);\r\n      setError(null); // Reset error state\r\n\r\n      const brandName = brandMapping[brandId];\r\n\r\n      if (!brandName) {\r\n        setError(\"Invalid brand ID.\"); // Handle case where brandId is not in mapping\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Fetch bikes for the specific brand\r\n        // ASSUMPTION: The backend endpoint 'api/get-bike/' can accept a query parameter like '?brand=BrandName'\r\n        // If your backend cannot do this, you will need to modify the backend API.\r\n        const data = await getData(`api/get-bike/?brand=${encodeURIComponent(brandName)}`);\r\n\r\n        // No need to filter on the frontend anymore if backend filters\r\n        setBikes(data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching brand bikes:\", err);\r\n        setError(err.message || \"Failed to fetch bikes.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBrandBikes();\r\n  }, [brandId, brandMapping]); // Add brandMapping to dependency array if it could change (unlikely here)\r\n\r\n  // Check if brandId is valid before trying to access brandInfo\r\n  if (!brandMapping[brandId]) {\r\n      return <div className=\"brand-not-found\">Brand not found</div>;\r\n  }\r\n\r\n  // Use brandInfo after confirming brandId is valid\r\n  const currentBrandInfo = brandInfo[brandId];\r\n\r\n  if (loading) return <div className=\"loading\">Loading bikes...</div>;\r\n  if (error) return <div className=\"error\">Error: {error}</div>;\r\n\r\n\r\n  return (\r\n    <div className=\"brand-details-container\">\r\n      <div className=\"brand-header\">\r\n        <h1>{currentBrandInfo.name}</h1>\r\n        <p className=\"brand-description\">{currentBrandInfo.description}</p>\r\n      </div>\r\n\r\n      <div className=\"bikes-grid\">\r\n        {bikes.map(bike => (\r\n          <MotorcycleCard\r\n            key={bike.id} // Assuming bike.id is unique and exists\r\n            id={bike.id}\r\n            image={bike.image1} // Assuming image1 field exists\r\n            name={bike.name}\r\n            year={bike.year}\r\n            category={bike.category}\r\n            displacement={bike.displacement}\r\n            description={bike.about || 'No description.'} // Removed the comment within JSX attributes\r\n            price={bike.price}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {bikes.length === 0 && !loading && !error && (\r\n        <div className=\"no-bikes\">No bikes found for {currentBrandInfo.name}.</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BrandDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}